week1
Login.html
<html>
<head>
<style>
body{
   background-image: url('logo2.jpg');
   background-repeat: no-repeat;
   background-attachment: fixed; 
   background-size: 100% 100%;
}

</style>
<script>
function validateForm() {
  var name=document.myform.uname.value;
  var password=document.myform.psw.value;
  if (name == "admin" && password=="abc123") {
    document.write("<h1><b>Valid User.Welcome</b></h1>");
  }
  else{
    alert("Login failed");
  }
}
</script>
</head>
<body align="center">
<form name="myform" method="post" onsubmit="return validateForm()">
  <h1 align="center">Login</h1>
  <div class="container" align="center">
    <label><b>Username</b></label>
    <input type="text" placeholder="Enter Username" name="uname">
    <br></br>

    <label><b>Password</b></label>
    <input type="password" placeholder="Enter Password" name="psw">
    <br></br>

    <button type="submit">Login</button>
  </div>
</form>
</body>
</html>

Login.html
<html>
<head>
<title>
Login Page
</title>
<script type=text/javascript>
function validate(){
var username = document.getElementById("username").value;
var password = document.getElementById("password").value;
if ( username == "admin" && password == "abc123"){
alert ("Login successfully");
window.location = "success.html";
return false;
}
else{
alert("Login Failed");
}
}
</script>
</head>
<body>
<form name="loginForm">
<table width="20%" align="center">
<tr>
<td colspan=2><center><font size=4><b>Login Page</b></font></center></td>
</tr>

<tr>
<td>Username:</td>
<td><input type="text" size=25 name="userid" id="username"></td>
</tr>

<tr>
<td>Password:</td>
<td><input type="Password" size=25 name="pwd" id="password"></td>
</tr>

<tr>
<td ><input type="Reset"></td>
<td><input type="submit" onclick="return validate()" value="Login"></td>
</tr>

</table>
</form>
</body>
</html>

success.html
<html>
<body>
<h1>Valid User... Welcome</h1>
</body>
</html>

----------------------------------------------------------------
week 2
#include <stdio.h>
int main()
{
    int n,c=300;
    float p;
    scanf("%d",&n);
    if(n<=120){
        p=c;
    }
    else if(n>120 && n<=190){
        p=c+(n-120)*1;
    }
    else if(n>190 && n<=240){
        p=c+70+(n-190)*0.82;
    }
    else{
        p=c+111+(n-240)*0.45;
    }
    printf("%.2f",p);
    return 0;
}

----------------------------------------------------------------
week 3
package com.JUnit.Addition;
public class Addition {
public int addNumbers(int a , int b) { 
int sum=a+b;   
return sum; 
}  
}

package com.vogella.Junit.Basic; 
import static org.junit.Assert.*; 
import java.util.Arrays; 
import java.util.Collection; 
import org.junit.Test; 
import org.junit.runner.RunWith; 
import org.junit.runners.Parameterized; 
import org.junit.runners.Parameterized.Parameters; 
@RunWith(Parameterized.class) 
public class AdditionTest { 
private int expected; private int first; private int second; 
public AdditionTest(int expectedResult, int firstNumber, int secondNumber) { 
this.expected = expectedResult; 
this.first = firstNumber; 
this.second = secondNumber; 
    
} 
@Parameters
public static Collection<Integer[]>addedNumbers() { 
return Arrays.asList(new Integer[][] { { 10,6, 4 }, { 6, 3, 3 }, { 20, 15, 5 }, { 13, 9, 4 },{2,1,1} }); } 
@Test 
public void test() { 
Addition add = new Addition(); 
System.out.println("Addition with parameters : "+ first + "and" + second); assertEquals(expected,add.addNumbers(first, second));
} 
}
----------------------------------------------------------------------------
week 4
package com.Junit.traingle; 
public class Traingle { 
public int shape(int a,int b,int c) { 
if(a>=b+c || b>=a+c || c>=a+b) { return 0; } 
else if(a==b && b==c) { return 1; } 
else if((a==b && b!=c) || (b==c && c!=a) || (c==a && c!=b)) { return 2; } 
else { return 3; } 
} }

package com.vogella.Junit.; 
import static org.junit.Assert.*; 
import java.util.Arrays; 
import java.util.Collection; 
import org.junit.Test; 
import org.junit.runner.RunWith; 
import org.junit.runners.Parameterized; 
import org.junit.runners.Parameterized.Parameters;
@RunWith(Parameterized.class) 
public class Traingle_test { 
int a; int b; int c; int res; 
public Traingle_test(int a,int b,int c,int res) { this.a=a; this.b=b; this.c=c; this.res=res; } @Parameters 
public static Collection<Integer []> sides_checked(){ return Arrays.asList(new Integer[][]{{3,4,5,2},{3,3,3,1}}); } 
@Test 
public void test() { 
Traingle ct=new Traingle(); 
System.out.println("Triangle with sides :"+a+", "+b+" and "+c); 
assertEquals(res,ct.shape(a, b, c)); 
} 
}

--------------------------------------------------------------------------------------
week 5
package com.Junit.Prime_Arm;
public class Prime_arm {
	public boolean prime(int n) {
		if(n==1){return false;}
		else if(n==2) {return true;}
		else {
		for(int i=2;i<n;i++) {
		if(n%i==0){return false;}
		}    return true;
		}    }
	public boolean armstrong(int n) {
	int pow=String.valueOf(n).length();
	int temp=n,sum=0,r=0;
	while(n>0) {
	r=n%10;
	sum+=Math.pow(r, pow);
	n/=10;    }
	if(sum==temp){return true;}
		return false;}
	public int check_prime_arm(int n) {
	if(prime(n)){return 1;}
	if(armstrong(n)){return 2;}
	return 0;    }    }
package com.vogella.Junit.; 
import static org.junit.Assert.*; 
import java.util.Arrays; 
import java.util.Collection; 
import org.junit.Test; 
import org.junit.runner.RunWith; 
import org.junit.runners.Parameterized; 
import org.junit.runners.Parameterized.Parameters;
@RunWith(Parameterized.class)
public class Prime_arm_test {
int n,int res;
public Prime_arm_test(int n,int res) {
this.n=n;this.res=res;    }
@Parameters
public static Collection<Integer[]> check_prime_arm(){
return Arrays.asList(new Integer[][] {{2,1},{3,1},{153,2}});    }
@Test
public void test() {
Prime_arm pa=new Prime_arm();
System.out.println("Checking the number "+n);
assertEquals(res,pa.check_prime_arm(n));    }
--------------------------------------------------------------------------------------
week 6
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace arithmetic
{public class ArithmeticOP
    {public int add(int x, int y)
     {return (x + y);}
     public int sub(int x, int y)
        {return (x - y); }
     public int mul(int x, int y)
        {return (x * y); }
     public int div(int x, int y)
        {return (x / y); }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using arithmetic;
using NUnit.Framework;
namespace Test
{
    [TestFixture]
    public class Testing
    {
        [Test]
        public void prs()
        {
ArithmeticOP p = new ArithmeticOP();            
Assert.AreEqual(20,p.mul(5,4));
Assert.AreEqual(8, p.add(5, 3));
Assert.AreEqual(10, p.sub(12,2));
Assert.AreEqual(8, p.div(16, 2));
        }
        [Test]
        public void prs1()
        { 
ArithmeticOP p = new ArithmeticOP();            
Assert.AreEqual(20,p.mul(5,4));
Assert.AreEqual(8, p.add(5, 3));
Assert.AreEqual(10, p.sub(12,2));
Assert.AreEqual(77, p.div(16, 2));
        }
    }   }
    
-------------------------------------------------------------------------------------
week 7
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace primefibarm
{
    public class fibarmprime
    {
        public int fib(int n)
        {
            int f1 = 0,f2=1,f=0;
            if (n == 0)
            {return 0;}
            
if (n == 1) {return 1; }
for (int i = 2; i < n; i++)
{f = f1 + f2;
 f1 = f2;
 f2 = f;
 }
 return f;
}
public int arm(int n)
{int r, sum = 0, temp;
 temp=n;
 int d = 0,temp1=n;
 while (temp1 > 0)
 {   d = d + 1;
     temp1 = temp1 / 10;
 }
 while (n > 0)
 {    r = n % 10;
      sum = sum + (int)(Math.Pow(r,d));
      n = n / 10;
 }
 if (sum == temp)
   {return 1; }
 return 0;
 }
 public Boolean prime(int n)
 {
 if(n==1)  return false;
 if (n == 2) return true;
 for (int i = 2; i < n; i++)
 { if (n % i == 0)
    {return false; }
    }
    return true;
    }  }  }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using primefibarm;
using NUnit.Framework;
namespace Test1
{ [TestFixture]
public class Class1
    {[Test]
public void prs()
{
fibarmprime p = new fibarmprime();
Assert.AreEqual(true, p.prime(7));
Assert.AreEqual(false, p.prime(12));
Assert.AreEqual(1, p.arm(153));
Assert.AreEqual(0, p.arm(21));
Assert.AreEqual(8, p.fib(7));
Assert.AreEqual(2, p.fib(4));
}
[Test]
public void prs1(){
    fibarmprime p = new fibarmprime();
Assert.AreEqual(true, p.prime(7));
Assert.AreEqual(false, p.prime(12));
Assert.AreEqual(1, p.arm(153));
Assert.AreEqual(0, p.arm(21));
Assert.AreEqual(8, p.fib(7));
Assert.AreEqual(8, p.fib(4));
}  }   
}   }
-------------------------------------------------------------------------------------
week 8
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace triandpalin
{public class palinandtri
{public int triangle(int a, int b, int c)
{if (a + b <= c || b + c <= a || a + c <= b)
{return 0;}
else if (a == b && b == c)
{return 1;}
else if ((a == b & b != c) || (a == c && a != b) || (b == c && a != c))
{return 2;}
else{return 3;}
}
public int palindrome(String word)
{String rev = String.Empty;
 if (word != null)
 {
for (int i = word.Length - 1; i >= 0; i--){rev += word[i].ToString();
 }
 if (rev == word)
 {return 1;}
 else
 {return 0;}
 }
 return 0;
  }  } }

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using triandpalin;
using NUnit.Framework;
namespace Test2
{[TestFixture]
public class Class1
{[Test]
public void psr(){
palinandtri p = new palinandtri();
Assert.AreEqual(1, p.triangle(3,3,3));
Assert.AreEqual(2, p.triangle(3, 3, 2));
Assert.AreEqual(3, p.triangle(3, 4, 5));
Assert.AreEqual(0,p.triangle(1,100,200));
Assert.AreEqual(1,p.palindrome("madam"));
Assert.AreEqual(0,p.palindrome("hello"));}
 [Test]
        Public void prs1(){}
    }
}
-------------------------------------------------------------------------------------
Week 10
Using id
Command->verify selected value
Target  id=email
Using name
Target name=email
Xpath
$x(‘//*[@id=”content”]/div/div/div[1]/div[1]’)
-------------------------------------------------------------------------------------
Week 11
Using tag and id
Verify element present, css=input#email
Using tag and class
Verify element present, css=input.inputtext


